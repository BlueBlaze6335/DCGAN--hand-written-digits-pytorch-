# -*- coding: utf-8 -*-
"""MNIST-DCGAN

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t08aRa_K7wOpC5sjzq91IQt09pK322b7
"""

import torch
from torch import nn
from tqdm.auto import tqdm
from torchvision import transforms
from torchvision.datasets import MNIST
from torchvision.utils import make_grid
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

def show_tensor_images(image_tensor, num_images=25, size=(1, 28, 28)):
    image_tensor = (image_tensor + 1) / 2
    image_unflat = image_tensor.detach().cpu()
    image_grid = make_grid(image_unflat[:num_images], nrow=5)
    plt.imshow(image_grid.permute(1, 2, 0).squeeze())
    plt.show()

#Generator block
def Generator(z_dim=10, im_chan=1, hidden_dim=64):
        z_dim = z_dim
        gen = nn.Sequential(
                nn.Sequential(
                nn.ConvTranspose2d(z_dim,hidden_dim * 4,kernel_size=3, stride=2),
                nn.BatchNorm2d(hidden_dim * 4),
                nn.ReLU(inplace=True)),
                nn.Sequential(
                nn.ConvTranspose2d(hidden_dim * 4,hidden_dim * 2,kernel_size=4, stride=1),
                nn.BatchNorm2d(hidden_dim * 2),
                nn.ReLU(inplace=True)),
                nn.Sequential(
                nn.ConvTranspose2d(hidden_dim * 2,hidden_dim,kernel_size=3, stride=2),
                nn.BatchNorm2d(hidden_dim),
                nn.ReLU(inplace=True)),
                nn.Sequential(
                nn.ConvTranspose2d(hidden_dim,im_chan,kernel_size=4, stride=2),
                nn.Tanh())
        )
        return gen

def unsqueeze_noise(noise):
        z_dim=noise.shape[1]
        return noise.view(len(noise), z_dim, 1, 1)

def forward(Generator, noise):
        x = unsqueeze_noise(noise)
        return Generator.gen(x)

def get_noise(n_samples, z_dim, device='cpu'):
    return torch.randn(n_samples, z_dim, device=device)

model=Generator()
model
#noise=get_noise(128,64)
#noise.shape

#Discriminator block
def Discriminator( im_chan=1, hidden_dim=16):
        disc = nn.Sequential(
            nn.Sequential(
                nn.Conv2d(im_chan,hidden_dim,kernel_size=4, stride=2),
                nn.BatchNorm2d(hidden_dim),
                nn.LeakyReLU(0.2,inplace=True)
                ),
            nn.Sequential(
                nn.Conv2d(hidden_dim,hidden_dim * 2,kernel_size=4, stride=2),
                nn.BatchNorm2d(hidden_dim * 2),
                nn.LeakyReLU(0.2,inplace=True)
                ),
            nn.Sequential(
                nn.Conv2d(hidden_dim * 2,1,kernel_size=4, stride=2),
                ),
        )
        return disc

def forward(Discriminator, image):
        disc_pred = Discriminator.disc(image)
        return disc_pred.view(len(disc_pred), -1)

discri=Discriminator()
discri

criterion = nn.BCEWithLogitsLoss() #bce loss
z_dim = 64
display_step = 500
batch_size = 128
lr = 0.0002 #learning rate =0.0002
beta_1 = 0.5 
beta_2 = 0.999
device = 'cuda'#GPU based 

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,)),
])
#loading data
dataloader = DataLoader(
    MNIST('./data', download=True, transform=transform),
    batch_size=batch_size,
    shuffle=True)

gen = Generator(z_dim).to(device)
gen_opt = torch.optim.Adam(gen.parameters(), lr=lr, betas=(beta_1, beta_2))
disc = Discriminator().to(device) 
disc_opt = torch.optim.Adam(disc.parameters(), lr=lr, betas=(beta_1, beta_2))
#weights
def weights_init(m):
    if isinstance(m, nn.Conv2d) or isinstance(m, nn.ConvTranspose2d):
        torch.nn.init.normal_(m.weight, 0.0, 0.02)
    if isinstance(m, nn.BatchNorm2d):
        torch.nn.init.normal_(m.weight, 0.0, 0.02)
        torch.nn.init.constant_(m.bias, 0)
gen = gen.apply(weights_init)
disc = disc.apply(weights_init)

n_epochs = 50 #more epochs may result in better generation
cur_step = 0
mean_generator_loss = 0
mean_discriminator_loss = 0
for epoch in range(n_epochs):
    
    for real, _ in tqdm(dataloader):
        cur_batch_size = len(real)
        real = real.to(device)

        ## Updating discriminator ##
        disc_opt.zero_grad()
        fake_noise = get_noise(cur_batch_size, z_dim, device=device)
        fake_noise=fake_noise.unsqueeze(2)
        fake_noise=fake_noise.unsqueeze(3)
        fake = gen(fake_noise)
        disc_fake_pred = disc(fake.detach())
        disc_fake_loss = criterion(disc_fake_pred, torch.zeros_like(disc_fake_pred))
        disc_real_pred = disc(real)
        disc_real_loss = criterion(disc_real_pred, torch.ones_like(disc_real_pred))
        disc_loss = (disc_fake_loss + disc_real_loss) / 2

        # Keeping track of the average discriminator loss
        mean_discriminator_loss += disc_loss.item() / display_step
        # Updating gradients
        disc_loss.backward(retain_graph=True)
        # Updating optimizer
        disc_opt.step()

        ## Updating generator ##
        gen_opt.zero_grad()
        fake_noise_2 = get_noise(cur_batch_size, z_dim, device=device)
        fake_noise_2=fake_noise_2.unsqueeze(2)
        fake_noise_2=fake_noise_2.unsqueeze(3)
        fake_2 = gen(fake_noise_2)
        disc_fake_pred = disc(fake_2)
        gen_loss = criterion(disc_fake_pred, torch.ones_like(disc_fake_pred))
        gen_loss.backward()
        gen_opt.step()

        # Keeping track of the average generator loss
        mean_generator_loss += gen_loss.item() / display_step

        ## Visualization of code and output per step ##
        if cur_step % display_step == 0 and cur_step > 0:
            print(f"Step {cur_step}: Generator loss: {mean_generator_loss}, discriminator loss: {mean_discriminator_loss}")
            show_tensor_images(fake)
            show_tensor_images(real)
            mean_generator_loss = 0
            mean_discriminator_loss = 0
        cur_step += 1